---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sonarr
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: sonarr
      version: 16.3.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/k8s-at-home/sonarr
      tag: v3.0.9.1549
      pullPolicy: Always
    env:
      TZ: "${TZ}"
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          # kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "television-box"
          # nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
        hosts:
          - host: "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "sonarr.${SECRET_DOMAIN}"
            secretName: "sonarr-tls"
      # api:
      #   enabled: true
      #   ingressClassName: "traefik"
      #   annotations:
      #     traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
      #     traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918@kubernetescrd"
      #   hosts:
      #     - host: "sonarr.${SECRET_DOMAIN}"
      #       paths:
      #         - path: /api
      #           pathType: Prefix
      #   tls:
      #     - hosts:
      #         - "sonarr.${SECRET_DOMAIN}"
    podSecurityContext:
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: "OnRootMismatch"
    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_SERVER}"
            path: "${NAS_PATH_MEDIA}"
        mountPath: /media
    podAnnotations:
      backup.velero.io/backup-volumes: config
    resources:
      requests:
        memory: 250Mi
        cpu: 500m
      limits:
        memory: 1500Mi
